・r'xxx' ⇒　xxxはRaw data

・'''xxx
     xxx''' ⇒　マルチ行表示（\nの省略）
     
・Noneは空値、特殊の値であ。￥ｒ。

・python3の文字列はUnicode、多言語対応

・byte型のデータはb'ABC'で表現、それぞれ1Byteで格納される

・strとbytesとコンバートするとき、エンコーディング方式は指定する必要、例：UTF-8

・Pythonソースコードファイルの宣言、UTF-8エンコーディング方法
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

・出力フォーマット
'This is %s, and %s' % (var, 'kobe')

・関数のパラメータ、ディフォルト値、例　foo(n, who='you')

・関数のパラメータの数は非特定が可能、Tupleとして使う
>>> def foo(*numbers):   #複数パラパラは受け取り、0からn
...     return(numbers)
...
>>> foo(1, 2, 3, 4)
(1, 2, 3, 4)
>>> foo()
()
>>> l = ['a', 'b', 'c', 'd']
>>> foo(l)     #リストを渡す
(['a', 'b', 'c', 'd'],)  #リストを扱う
>>> foo(*l)    #リストのエレメントを渡す
('a', 'b', 'c', 'd')     #エレメントごとで処理

・関数のキーパラメータ、Dictとして使う
>>> def foo(args, **kwargs):
...     print(args)
...     print(kwargs)
...
>>> foo('test')
>>> foo('test', me= 'too')
test
{'me': 'dict'}
>>> dict = {'1':'a', '2':'b', '3':'c'}
>>> foo('test', **dict)       #変数dictのコピーを渡す

・汎用の関数呼び方：func(*args, **kw)

・関数のキーワードパラメータ、名前付けキーワードパラメータ
>>> def foo(a, b, **kw):
...     if 'do' in kw:
...             print(kw)
...     else:
...             print(a, b)
>>> foo('you', 'can', do='YES')
{'do': 'YES'}
>>> foo('you', 'can')
you can

・リストスライス方法　⇒　L[0:3] L[-1] L[start:end:step]

・リスト作り方　⇒　list(range(0, 11))、例：L2 = [x for x in L1 if isinstance(x, str)]

・関数はパラメータとして使える、関数ポインターの使い方と類似

・【map/reduce】
r = map(f, [x for x in range(0, 11)]) #2番目のリストを関数fに渡して処理を行う
>>> from functools import reduce
>>> def f(x, y):
...     return(x * 10 + y)
...
>>> r = reduce(f, l)　#仕組みは、f(list0)、f(f(list0), list(1))、繰り返して結果を結合しながら処理
>>> print(r)
13579

・【filter】
関数の返却値のTrueOrFalseに従い、リストのエレメントを保留・削除する
>>> def f(x):
...     return(isinstance(x, str))
...
>>> l = ['1', 2, '3', 4]
>>> list(filter(f, l))

・【sorted】
key関数の結果で順番を決める


・クロージャ　⇒　関数は返却値として使う　⇒　※使い方によって機能は広められる　★要注意★
>>> def after_sum(*args):
...     def sum():
...             ret = 0
...             for i in args:
...                     ret += i
...             return ret
...     return sum
...
>>> f = after_sum(1, 2, 3, 4, 5)
>>> f
<function lazy_sum.<locals>.sum at 0x7f039c544f28> #変数は関数のポインター
>>> f()　#呼び出されると実行する
15

・Lambda関数　⇒　関数名はない、returnは使用不可、センテンスひとつ
list(filter(lambda x: x % 2 == 1, range(1, 20)))

・Decorate関数　⇒　func = decorate(func) = @decorate
decorateしたい処理は、wrapperにおけるfunc前後の処理であり、funcも実行可能
decorateで宣言する関数は、新たな関数wrapperになったこと。

import functools
>>> def log(func):
        @functools.wraps(func)     #wrapper.__name__ = func.__name__
...     def wrapper(*args, **kw):
...             print('call me %s ():' % func.__name__)
...             func(*args, **kw)
...             print('me done')
...             return
...     return wrapper
...
>>> @log
... def now():
...     print('yyyyy-mm-dd')
...
>>> now()
call me now ():
yyyy-mm-dd
me done

また、decorateにパラメータを渡すことは可能
def log(text): #呼び出すときlog('text')(func)の形と同様
    def decorator(func):
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

　関数の実行時間を算出する
def metric(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
                start = time.time()
                ret = func(*args, **kw)
                end = time.time()
                print('%s function used %s ms' % (func.__name__, abs(end - start) * 1000))
                return(ret)
        return(wrapper)
