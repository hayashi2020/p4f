・r'xxx' ⇒　xxxはRaw data

・'''xxx
     xxx''' ⇒　マルチ行表示（\nの省略）
     
・Noneは空値、特殊の値であ。￥ｒ。

・python3の文字列はUnicode、多言語対応

・byte型のデータはb'ABC'で表現、それぞれ1Byteで格納される

・strとbytesとコンバートするとき、エンコーディング方式は指定する必要、例：UTF-8

・Pythonソースコードファイルの宣言、UTF-8エンコーディング方法
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

・出力フォーマット
'This is %s, and %s' % (var, 'kobe')

・関数のパラメータ、ディフォルト値、例　foo(n, who='you')

・関数のパラメータの数は非特定が可能、Tupleとして使う
>>> def foo(*numbers):   #複数パラパラは受け取り、0からn
...     return(numbers)
...
>>> foo(1, 2, 3, 4)
(1, 2, 3, 4)
>>> foo()
()
>>> l = ['a', 'b', 'c', 'd']
>>> foo(l)     #リストを渡す
(['a', 'b', 'c', 'd'],)  #リストを扱う
>>> foo(*l)    #リストのエレメントを渡す
('a', 'b', 'c', 'd')     #エレメントごとで処理

・関数のキーパラメータ、Dictとして使う
>>> def foo(args, **kwargs):
...     print(args)
...     print(kwargs)
...
>>> foo('test')
>>> foo('test', me= 'too')
test
{'me': 'dict'}
>>> dict = {'1':'a', '2':'b', '3':'c'}
>>> foo('test', **dict)       #変数dictのコピーを渡す

・汎用の関数呼び方：func(*args, **kw)

・関数のキーワードパラメータ、名前付けキーワードパラメータ
>>> def foo(a, b, **kw):
...     if 'do' in kw:
...             print(kw)
...     else:
...             print(a, b)
>>> foo('you', 'can', do='YES')
{'do': 'YES'}
>>> foo('you', 'can')
you can

・リストスライス方法　⇒　L[0:3] L[-1] L[start:end:step]

・リスト作り方　⇒　list(range(0, 11))、例：L2 = [x for x in L1 if isinstance(x, str)]

・関数はパラメータとして使える、関数ポインターの使い方と類似

・【map/reduce】
r = map(f, [x for x in range(0, 11)]) #2番目のリストを関数fに渡して処理を行う
>>> from functools import reduce
>>> def f(x, y):
...     return(x * 10 + y)
...
>>> r = reduce(f, l)
>>> print(r)
13579

