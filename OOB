　　　　※OOB※
    
■クラス
    ⇒インスタンスメソッド
    
・インスタンスから呼び出す
・一番目のパラメータはインスタンス
class MyClass:
        def foo(self):
                print(id(self), 'foo')

a = MyClass()
a.foo()
 
    ⇒クラスメソッド
・Decorate ＠classmethodで定義
・一番目のパラメータはクラスのRef
・インスタンスからの呼び出しも可能
・クラスのメモリスペースが確保される
class MyClass:

        def foo(self):
                print(id(self), 'foo')

        @classmethod
        def foo2(self):
                print(id(self), 'foo2')

MyClass.foo2()
a = MyClass()
a.foo2()

　　　⇒スターテックメソッド
・@staticmethodで定義
・クラスまたはインスタンスから呼び出される
・外部の関数と同じく使われる

class MyClass:
        @staticmethod
        def foo():
                print('foo')

MyClass.foo()
a = MyClass()
a.foo()

■クラスを定義

Class name
 
  class varialbe　⇒　クラス変数、全てのインスタンスはこの変数を持つ、値を変更することはできる ⇒　Class.V　Var.V　変更範囲異なる
   
  def __new__
  ↓
  def __init__　⇒　初期化方法
  ↓
  def foo()　⇒　selfはインスタンスというもので、パラメータとしては必須
  
■インスタンスを作成
インスタンスのプロパティなどを操作することができる
クラスには、汎用のディフォルトのプロパティとメソッドがある

■クラスの継承
・スーパークラスの__init__は呼び出されることはできない、サブクラスに呼び出すこと
・スーパークラスのメソッドを呼び出す時、スーパークラスのクラス名を付き、selfパラメータも付く必要がある
・サブクラスにメソッドを探そう、なければスーパークラスに探すになる

スーパークラス　init関数
class MyClass(object):
super(SubClass, self).__init__()

・プライベートとパブリック
プライベートの変数とメソッドは、__と前付けて定義
これは一般的な使い方である

_　⇒　Protected
__　⇒　Private


■多態性
Animal->Dog
      ->Cat
  method: run/run_twice(a)
  
Car
  method: run
  
a = Animal()
dog = Dog()
cat = Cat()
a.run_twice(a)
a.run_twice(dog)　#多態性(polymorphism) 
a.run_twice(cat)
car = Car()
a.run_twice(car)　#呼び出される、Carクラスはrun関数をもつから


■@propertyを使ってクラス変数を守る

class Screen(object):　#object新なクラスの意味合い、継承関係の検索がよい　⇒正直、なければ、_widthなどは未定義になった？？？

        @property　#READONLY
        def width(self):
                return(self._width)

        @width.setter　#Format要注意、書き込み可
        def width(self, value):
                self._width = value

        @property
        def height(self):
                return(self._height)

        @height.setter
        def height(self, value):
                self._height = value

        @property
        def resolution(self):
                return(self._width * self._height)

s = Screen()
s.width = 1024　#実はメソッドを使う
s.height = 768
print(s.resolution)
s.resolution = 1000 #AttributeError: can't set attribute

■多重継承
MixIn方法、マルチクラスから継承

class Animal(object):
        def think(self):
                print('I can think')

class Mammal(Animal):
        def mammal(self):
                print('I am mamal')

class Bird(Animal):
        def bird(self):
                print('I am bird')

class RunnableMixIn(object):
        def run(self):
                print('I can run')

class FlyableMixIn(object):
        def fly(self):
                print('I can fly')

class Dog(Mammal, RunnableMixIn):
        pass

class Parrot(Bird, FlyableMixIn):
        pass
