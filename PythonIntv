Q:isと==とは何か違いがあるか
A:オブジェクトは三つの要素があり、ID=識別子、type=データタイプ、valueは値。==は値比較で、isは識別子の比べとなる。

Q:ファイルのread/readline/readlinesの違い
A:read=ファイルを読み出し、文字列を返す。
readline=次の行を読み出し、その行のみの文字列を返す。
readlines=ファイルのすべてを行単位で読み出し、List（行）を返す。

Q:二つ以上の辞書の作成方法
A:①dict1={"a":1, "b":2}
②dict2={}　dict2["a"]=1　dict2["b"]=2

Q:*args, **kwargsの使い方
A:https://note.nkmk.me/python-args-kwargs-usage/
*args: 複数の引数をタプルとして受け取る
**kwargs: 複数のキーワード引数を辞書として受け取る

Q:matchとsearchとの違い
A:matchは文字列の先頭から探してはじめ、searchは位置にも拘らず、全部の内容からサーチする

Q:関数はフォルダー名を引数にし、このフォルダーの配下のファイルパスを返す。
A:
import os
def return_file_path(dir_name):
        file_list = os.listdir(dir_name)
        for i in file_list:
                print(dir_name + '/' + i)

ret_file_path("#path")

Q:リストの重複の要素を削除してください
A:
sa = set(la)
la = list(sa)

la2 = []
for i in la:
        if i not in la2:
                la2.append(i)

for i in l:
        la.remove(l[i])
        
Q:デコレーターを使って関数の返し値を処理してください
A:https://qiita.com/mtb_beta/items/d257519b018b8cd0cc2e
デコレーターは、関数前に処理を入れ返し値を戻すこと、または、関数の返し値を処理し戻すことは可能。
str.capitalize(): 先頭の一文字を大文字、他を小文字にする

def caps_first_word(func):
        def wrapper(*args, **kwargs):
                ret = func(*args, **kwargs)
                return ret.capitalize()
        return wrapper

@caps_first_word
def foo(word='hi, everyone'):
        return word.lower()
        
Q:yieldの使い方
A:http://giraffe.topaz.ne.jp/wiki/doku.php/py:lesson14
Breakpointのように現在の状態を格納し、関数をサスペンドにする
返し値として返す。複数も可能。

Q:スレッドのstartとrunメソッドの違い
A:startはプロセスを実行してからスレッドを実行する
runは関数の呼び出しと一緒

Q:Pythonのメモリ管理の仕組み
A:
・Reference Count：新規（x=1/y=x/foo(x)/a=[1, 2]）⇒回収（exit from foo/del x/x=1, x=2/list.remove(x)/del list）
・GC：Reference Count=0、a=b,b=aの循環レファレンス
・メモリプール：頻繁にメモリのニューやリリースに効率高く⇒カーネルメモリ申請ではなく、プールに任せる

Q:Lambda関数の意味、使い方など
A:無名関数、関数を式として扱い変数に代入できるようにする手法であり、プログラムのコードを簡潔にするメリットがある
def foo(a, b):
        return (a + b) + (a * b)

ret = foo(1, 2)
===
ret = (lambda a, b:(a + b) + (a * b))(1, 2)

lambda 引数:処理内容

Q:tuple ⇔ list変換
A:l = list(t)/t = tuple(l)

Q:オブジェクトをコピーする仕組み（イーコル、浅いコピー、深いコピー操作）
A:
イーコルは、アドレスのレファレンスを変数にイーコルするが、値は自らのスペースを持つ
>>> str1 = "a"
>>> print id(str1)
3074747880
>>> str1 = 'b'
>>> str2 = str1
>>> print id(str2)
3074747904
>>> str1 = 'a'
>>> print id(str1)
3074747880
>>> print id(str2)
3074747904
>>> l = [1, 2, 3]★
>>> print id(l)
3070691916★⇒違うオブジェクト
>>> l.append(4)
>>> print id(l)
3070691916
>>> print id(l[0]) ★
146028720★⇒1のアドレス
>>> print id(l[1])
146028708
>>> print id(l[2])
146028696
>>> print id(l[3])
146028684
>>> l1 = [1, 2, 3, 4]★
>>> print id(l1)
3070692364★⇒違うオブジェクト、アドレスが異なる
>>> print id(l1[0]) ★
146028720★⇒1のアドレス、同じオブジェクト、アドレスが同じ
>>> l2 = l1
>>> print id(l2)
3070692364
>>> print id(l1)
3070692364
>>> l1[0] = 100
>>> print l2[0]
100

浅い (shallow) コピーと深い (deep) コピーの違いが関係するのは、複合オブジェクト (リストやクラスインスタンスのような他のオブジェクトを含むオブジェクト) だけです:
浅いコピー (shallow copy) は新たな複合オブジェクトを作成し、その後 (可能な限り) 元のオブジェクト中に見つかったオブジェクトに対する【参照】 を挿入します。
深いコピー (deep copy) は新たな複合オブジェクトを作成し、その後元のオブジェクト中に見つかったオブジェクトの 【コピー】 を挿入します。
深いコピー操作には、しばしば浅いコピー操作の時には存在しない 2 つの問題がついてまわります:
再帰的なオブジェクト (直接、間接に関わらず、自分自身に対する参照を持つ複合オブジェクト) は再帰ループを引き起こします。
深いコピーは何もかもコピーしてしまうため、例えば複数のコピー間で共有するつもりだったデータも余分にコピーしてしまいます。
